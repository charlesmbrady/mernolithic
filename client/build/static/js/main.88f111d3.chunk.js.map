{"version":3,"sources":["utils/API.js","pages/dashboard/Dashboard.js","utils/AUTH.js","components/Login/Login.js","components/Signup/Signup.js","pages/landing/Landing.js","App.js","serviceWorker.js","index.js"],"names":["localStorage","getItem","setItem","JSON","stringify","message","axios","defaults","headers","common","parse","token","getHellos","get","catch","err","Dashboard","className","data-test","id","onClick","API","then","response","console","log","alert","window","location","replace","logout","clear","login","user","post","signup","Login","props","useState","username","setUsername","password","setPassword","Container","Row","Col","placeholder","name","onChange","e","target","value","type","AUTH","data","notify","setTimeout","handleLogin","toggleSignup","Signup","firstName","setFirstName","lastName","setLastName","handleSignup","Landing","setSignup","App","toast","info","position","POSITION","TOP_CENTER","success","error","exact","path","render","autoClose","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88f111d3.chunk.js","sourcesContent":["import axios from \"axios\";\n\n//set the default authorization header to the jwt token from local storage if there is one\nif(!localStorage.getItem('connection')){\n    localStorage.setItem('connection', JSON.stringify({ message: \"no connection\" }))\n}\naxios.defaults.headers.common['Authorization'] = `Bearer ${JSON.parse(localStorage.getItem('connection')).token}`; \n\nexport default {\n    \n    // Gets hellos from the protected route\n    getHellos: function () {\n        return axios.get('/api/hellos').catch(err => { throw err });\n    }\n\n};","import React from \"react\";\nimport API from '../../utils/API';\nimport './style.css';\n\nfunction Dashboard() {\n\n  const getHellos = () => {\n    API.getHellos().then(response => {\n      console.log(response)\n    })\n    .catch(err => {\n        if (err) {\n          alert(`There was an error:\\n ${err} \\n\\r\\n Redirecting you to landing page...`);\n\n          //redirect to landing page\n          window.location.replace('/')\n        }\n      })\n  }\n\n  return (\n    <div className=\"Dashboard\">\n      <h1 data-test='dashboard-header'>Dashboard</h1>\n      <button id=\"get-hellos-button\" className=\"btn btn-warning\" onClick={() => getHellos()}>GetHellos(protected)</button>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import axios from \"axios\";\n\nexport default {\n    // Logs the user out\n    logout: function () {\n        localStorage.clear()\n    },\n    // Log the user in\n    login: function (user) {\n        return axios.post('/auth/login', user).catch(err => { throw err });\n    },\n    // New user registration\n    signup: function (user) {\n        return axios.post('/auth/signup', user);\n    }\n};","import React, { useState } from \"react\";\nimport {\n  Container,\n  Row,\n  Col\n} from 'reactstrap';\nimport AUTH from '../../utils/AUTH';\nimport './style.css';\n\nfunction Login(props) {\n  //need to use toggleSignup from props\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleLogin = () => {\n    const user = { username, password };\n    AUTH.login(user).then(response => {\n      //If there is a successfull connection, store in local storage and \n      //redirect to the user's dashboard\n      if (response.data.token) {\n        props.notify(\"success\", \"Authenticated, logging in...\")\n        localStorage.setItem('connection', JSON.stringify(response.data))\n        setTimeout(() => {\n          window.location.replace('dashboard')\n        }, 2000)\n      } else {\n        props.notify(\"error\", response.data.message)\n      }\n    });\n  }\n\n  return (\n    <Container className=\"Login\">\n      <Row>\n        <Col>\n          <h3 className=\"authentication-header\" data-test=\"login-header\">Login</h3>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <input id=\"username\"\n            className=\"authentication-input\"\n            placeholder=\"email/username\"\n            name=\"username\"\n            data-test=\"login-input-username\"\n            onChange={e => setUsername(e.target.value)}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <input id=\"password\"\n            placeholder=\"password\"\n            className=\"authentication-input\"\n            name=\"password\"\n            type=\"password\"\n            data-test=\"login-input-password\"\n            onChange={e => setPassword(e.target.value)}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <button data-test=\"login-submit-button\" id=\"login-button\" className=\"options btn btn-primary\" onClick={() => handleLogin()}>Submit</button>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <button data-test=\"login-signup-button\" id=\"signup-button\" className=\"options btn btn-secondary\" onClick={() => props.toggleSignup()}>Signup</button>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\nexport default Login;","import React, { useState } from \"react\";\nimport {\n  Container,\n  Row,\n  Col\n} from 'reactstrap';\nimport AUTH from '../../utils/AUTH';\nimport './style.css';\n\nfunction Signup(props) {\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSignup = () => {\n    const user = { firstName, lastName, username, password };\n    AUTH.signup(user).then( response => {\n      if(response.data.message){\n        props.notify(\"error\", response.data.message)\n      }else {\n        props.notify(\"success\", \"Success! Signed up!\")\n        props.toggleSignup();\n      }\n    });\n  }\n\n  return (\n    <Container className=\"Signup\">\n      <Row>\n        <Col>\n          <h3 className=\"authentication-header\" data-test=\"signup-header\">Signup</h3>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <input\n            id=\"first-name\"\n            className=\"authentication-input\"\n            placeholder=\"First Name\"\n            name=\"firstName\"\n            data-test=\"signup-input-first-name\"\n            onChange={e => setFirstName(e.target.value)}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <input\n            id=\"last-name\"\n            className=\"authentication-input\"\n            placeholder=\"Last Name\"\n            name=\"lastName\"\n            data-test=\"signup-input-last-name\"\n            onChange={e => setLastName(e.target.value)}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <input\n            id=\"username\"\n            className=\"authentication-input\"\n            placeholder=\"Email/Username\"\n            name=\"username\"\n            data-test=\"signup-input-username\"\n            onChange={e => setUsername(e.target.value)}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <input\n            id=\"password\"\n            className=\"authentication-input\"\n            placeholder=\"Password\"\n            name=\"password\"\n            type=\"password\"\n            data-test=\"signup-input-password\"\n            onChange={e => setPassword(e.target.value)}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <button data-test=\"signup-submit-button\" id=\"submit-button\" className=\"options btn btn-primary\" onClick={() => handleSignup()}>Submit</button>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <button data-test=\"signup-login-button\" id=\"login-button\" className=\"options btn btn-secondary\" onClick={() => props.toggleSignup()}>Login</button>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\nexport default Signup;\n","import React, { useState } from \"react\";\nimport Login from '../../components/Login/Login';\nimport Signup from '../../components/Signup/Signup';\nimport './style.css';\n\nfunction Landing(props) {\n  const [signup, setSignup] = useState(false);\n\n  const toggleSignup = () => {\n    setSignup(!signup);\n  }\n\n  return (\n    <div className=\"Landing\">\n      <h1 data-test='landing-header'>MERN-JWT-Starter-Auth</h1>\n      {\n        !signup ? (\n          <Login notify={props.notify} toggleSignup={toggleSignup}/>\n        ) : (\n          <Signup notify={props.notify} toggleSignup={toggleSignup}/>\n        )\n      }\n    </div>\n  );\n}\n\nexport default Landing;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css';\nimport Dashboard from \"./pages/dashboard/Dashboard\";\nimport Landing from \"./pages/landing/Landing\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  const notify = (type, message) => {\n    switch (type) {\n      case 'info':\n        toast.info(message, {\n          position: toast.POSITION.TOP_CENTER\n        });\n        break;\n\n      case 'success':\n        toast.success(message, {\n          position: toast.POSITION.TOP_CENTER,\n        });\n        break;\n\n      case 'error':\n        toast.error(message, {\n          position: toast.POSITION.TOP_CENTER\n        });\n        break;\n      \n      default:\n        toast.info(message, {\n          position: toast.POSITION.TOP_CENTER\n        })\n    }\n  }\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path='/'\n            render={() => <Landing notify={notify} />}\n          />\n          <Route\n            exact\n            path='/dashboard'\n            render={() => <Dashboard notify={notify} />}\n          />\n          <Route\n            render={() => <Landing notify={notify} />}\n          />\n        </Switch>\n        <ToastContainer autoClose={2000} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}